/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.clock;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JScrollPane;



/**
 *
 * @author 226797
 */
public final class AlarmUI extends javax.swing.JFrame {
   
    private int temphour; // 保存新建的闹钟时间  
    private int tempminute;  
    private int tempweek;  
    AddAlarm a1;
    private JScrollPane jsp;  
    private JList<String> jl;  
    private DefaultListModel<String> listModel;  
    public AlarmUI() {  
        initComponents();   
        refreshUI();
    }  
    /**
     * Creates new form AlarmUI
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        new1 = new javax.swing.JButton();
        modify1 = new javax.swing.JButton();
        dele1 = new javax.swing.JButton();
        jsp1 = new javax.swing.JScrollPane();
        jl1 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        new1.setText("新建");
        new1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new1ActionPerformed(evt);
            }
        });

        modify1.setText("修改");
        modify1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modify1ActionPerformed(evt);
            }
        });

        dele1.setText("删除");
        dele1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dele1ActionPerformed(evt);
            }
        });

        jl1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jsp1.setViewportView(jl1);

        jButton1.setText("刷新");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jsp1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(new1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(modify1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(dele1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(new1)
                    .addComponent(modify1)
                    .addComponent(dele1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jsp1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void new1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new1ActionPerformed
        // 点击新建按钮
        a1=new AddAlarm();
        a1.setAlarmButton.addActionListener(new ActionListener() {  
            @Override  
            public void actionPerformed(ActionEvent e) {  
                refreshUI();
            }  
        });
        
        //temphour=Integer.parseInt(a1.getHour());
        //tempminute=Integer.parseInt(a1.getMinute());
         
    }//GEN-LAST:event_new1ActionPerformed

    private void modify1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modify1ActionPerformed
        // TODO add your handling code here:
        //点击修改按钮，你要先获取当前列表的值然后传递到addalarm的每个表格上
        int si = jl.getSelectedIndex();  
                if (si != -1) {  
                    System.out.println("Selected row index: " + si);  
                } else {  
                    System.out.println("No row selected.");  
                    return;
                }  
         readAlarm a =new readAlarm();
         a1=new AddAlarm();
         a1.hourField.setText(Integer.toString(a.nt[si].hour));
         a1.minuteField.setText(Integer.toString(a.nt[si].minutes));
         String fq = a.nt[si].frequency;
         if("一次".equals(fq)) a1.onlyOnceRadioButton.setSelected(true);
         if("每天".equals(fq)) a1.everydayRadioButton.setSelected(true);
         if("工作日".equals(fq)) a1.workdayRadioButton.setSelected(true);
         if("休息日".equals(fq)) a1.weekendRadioButton.setSelected(true);
         for(int i = 0; i < 7 ;++i){
             if(a.nt[si].vb[i] == 1)
                 a1.checkBoxes[i].setSelected(true);
         }
         int x = a.nt[si].music - 1;
         a1.comboBox.setSelectedIndex(x);
         //然后删除
         a1.setAlarmButton.addActionListener(new ActionListener() {  
            @Override  
            public void actionPerformed(ActionEvent e) {  
                delete(si);
            }  
        });
         
    }//GEN-LAST:event_modify1ActionPerformed
    public void delete(int x){
        if (x != -1) {  
                    System.out.println("Selected row index: " + x);  
                } else {  
                    System.out.println("No row selected.");  
                    return;
                }  
        readAlarm a =new readAlarm();
        String fileName = "allAlarm.txt"; // 文件名  
         try {  
            FileWriter writer = new FileWriter(fileName);  
            writer.write(""); // 写入一个空字符串，实际上就是清空了文件内容  
            writer.close();  
            System.out.println("文件已清空。");  
        } catch (IOException e) {  
            System.out.println("发生错误：" + e.getMessage());  
        }  
        int n = a.ccnt;
        for(int i = 0; i < n; ++i){
            if(i == x) continue;
            String newAlarm=a.nt[i].hour+","+a.nt[i].minutes+","+a.nt[i].frequency+","+a.nt[i].music+",";
            for(int ii = 0; ii < 6; ++ii){
                    newAlarm+= a.nt[i].vb[ii] + ",";
                }
                newAlarm += a.nt[i].vb[6];
                a1.writeAlarm(newAlarm);
        }
        refreshUI();
    }
    private void dele1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dele1ActionPerformed
        // TODO add your handling code here:
        //点击删除列表，不会就直接删除txt里那一行然后重新refresh
        int selectedIndex = jl.getSelectedIndex();  
                if (selectedIndex != -1) {  
                    System.out.println("Selected row index: " + selectedIndex);  
                } else {  
                    System.out.println("No row selected.");  
                    return;
                }  
        readAlarm a =new readAlarm();
        String fileName = "allAlarm.txt"; // 文件名  
         try {  
            FileWriter writer = new FileWriter(fileName);  
            writer.write(""); // 写入一个空字符串，实际上就是清空了文件内容  
            writer.close();  
            System.out.println("文件已清空。");  
        } catch (IOException e) {  
            System.out.println("发生错误：" + e.getMessage());  
        }  
        int n = a.ccnt;
        for(int i = 0; i < n; ++i){
            if(i == selectedIndex) continue;
            String newAlarm=a.nt[i].hour+","+a.nt[i].minutes+","+a.nt[i].frequency+","+a.nt[i].music+",";
            for(int ii = 0; ii < 6; ++ii){
                    newAlarm+= a.nt[i].vb[ii] + ",";
                }
                newAlarm += a.nt[i].vb[6];
                a1.writeAlarm(newAlarm);
        }
        refreshUI();
    }//GEN-LAST:event_dele1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        refreshUI();
    }//GEN-LAST:event_jButton1ActionPerformed
    public void refreshUI(){
        jsp = jsp1;  
        jl = jl1;  
        listModel = new DefaultListModel<>();  
        readAlarm a = new readAlarm();
        for(int i = 0; i < a.cnt; ++i){
            String newAlarm=a.nt[i].hour+"\t:\t"+ a.nt[i].minutes +"  \t"+ a.nt[i].frequency;
            listModel.addElement(newAlarm);
            
        }
        jl.setModel(listModel); // 设置JList的数据模型  
        jsp.setViewportView(jl); // 将JList设置为JScrollPane的内容视图 
       //这个是代码举例，应该是读取你那个文本里的数据，判断闹钟条目数量然后循环添加到列表中，
       //最终可以满足你的修改获取数据啥的
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlarmUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlarmUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlarmUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlarmUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlarmUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dele1;
    private javax.swing.JButton jButton1;
    private javax.swing.JList<String> jl1;
    private javax.swing.JScrollPane jsp1;
    private javax.swing.JButton modify1;
    private javax.swing.JButton new1;
    // End of variables declaration//GEN-END:variables
}
